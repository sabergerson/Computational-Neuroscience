#Python code for automated neural processes

#Membrane Equation: Graph A (resistance = 0.025 uS)

#import packages
import pandas as pd
import matplotlib.pyplot as plt

#CONSTANTS
resistance = 0.025
energy = -65
capacitance = 0.5
delta_time = 1

#initial values
time = 0
current_injected = 0
delta_membrane_potential = 0
membrane_potential = -65

#injected currents trial 1
current_values = ['0', '0.25', '0.3536', '0.5', '0.707', '1', '1.41'] 

#lists of membrane potentials and time stamps
membrane_potential_values_A = {'0': [membrane_potential], '0.25':[membrane_potential], '0.3536':[membrane_potential], '0.5':[membrane_potential], '0.707':[membrane_potential], '1':[membrane_potential], '1.41':[membrane_potential]}
time_values = [time]

for i in range(len(current_values)):
    #calculate for 300 time steps (ms) at 150 ms injected current returns to 0
    for j in range(300):
        #update time
        time += delta_time
        #assign injected current
        if (j < 150):
            current_injected = float(current_values[i]) 
        else:
            current_injected = 0
        #calculate delta_membrane_potential with update membrane_potential
        delta_membrane_potential = (delta_time/capacitance)*(current_injected-(resistance*(membrane_potential-energy)))
        #calculate membrane_potential with updated delta_membrane_potential
        membrane_potential = membrane_potential+(delta_time*delta_membrane_potential)
        #update lists with new values
        membrane_potential_values_A[current_values[i]].append(membrane_potential)
        time_values.append(time)

#create dataframe
df_A = pd.DataFrame.from_dict(membrane_potential_values_A) 

#create and display plot
df_A.plot()
plt.title("Membrane Equation Model A")
plt.xlabel("Time (ms)")
plt.ylabel("Membrane potential (mV)")
plt.ylim([-80, 0])

#Membrane Equation: Graph B

#CONSTANTS
resistance = 0.05
energy = -65
capacitance = 0.5
delta_time = 1

#initial values
time = 0
current_injected = 0
delta_membrane_potential = 0
membrane_potential = -65

#injected currents trial 1
current_values = ['0', '0.25', '0.3536', '0.5', '0.707', '1', '1.41'] 

#lists of membrane potentials and time stamps
membrane_potential_values_B = {'0': [membrane_potential], '0.25':[membrane_potential], '0.3536':[membrane_potential], '0.5':[membrane_potential], '0.707':[membrane_potential], '1':[membrane_potential], '1.41':[membrane_potential]}
time_values = [time]

for i in range(len(current_values)):
    #calculate for 300 time steps (ms) at 150 ms injected current returns to 0
    for j in range(300):
        #update time
        time += delta_time
        #assign injected current
        if (j < 150):
            current_injected = float(current_values[i]) 
        else:
            current_injected = 0
        #calculate delta_membrane_potential with update membrane_potential
        delta_membrane_potential = (delta_time/capacitance)*(current_injected-(resistance*(membrane_potential-energy)))
        #calculate membrane_potential with updated delta_membrane_potential
        membrane_potential = membrane_potential+(delta_time*delta_membrane_potential)
        #update lists with new values
        membrane_potential_values_B[current_values[i]].append(membrane_potential)
        time_values.append(time)

#create dataframe
df_B = pd.DataFrame.from_dict(membrane_potential_values_B) 

#create and display plot
df_B.plot()
plt.title("Membrane Equation Model B")
plt.xlabel("Time (ms)")
plt.ylabel("Membrane potential (mV)")
plt.ylim([-80, 0])
